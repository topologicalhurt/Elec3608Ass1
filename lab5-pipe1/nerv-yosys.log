
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `nerv.yosys' --

1. Executing Verilog-2005 frontend: nerv2.sv
Parsing SystemVerilog input from `nerv2.sv' to AST representation.
Generating RTLIL representation for module `\nerv'.
nerv2.sv:375: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \nerv

2.2.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv2.sv:352$76'.
Cleaned up 1 empty switch.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$nerv2.sv:352$76 in module nerv.
Marked 1 switch rules as full_case in process $proc$nerv2.sv:341$73 in module nerv.
Marked 19 switch rules as full_case in process $proc$nerv2.sv:171$19 in module nerv.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\nerv.$proc$nerv2.sv:352$76'.
     1/13: $0\trapped_q[0:0]
     2/13: $0\reset_q[0:0]
     3/13: $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79
     4/13: $0$memwr$\regfile$nerv2.sv:363$1_DATA[31:0]$78
     5/13: $0$memwr$\regfile$nerv2.sv:363$1_ADDR[4:0]$77
     6/13: $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82
     7/13: $0$memwr$\regfile$nerv2.sv:365$2_DATA[31:0]$81
     8/13: $0$memwr$\regfile$nerv2.sv:365$2_ADDR[4:0]$80
     9/13: $0\trapped[0:0]
    10/13: $0\wb_rd_q[4:0]
    11/13: $0\wb_data_q[31:0]
    12/13: $0\wb_wr_q[0:0]
    13/13: $0\pc[31:0]
Creating decoders for process `\nerv.$proc$nerv2.sv:341$73'.
     1/2: $1\mem_rdata[31:0]
     2/2: $0\mem_rdata[31:0]
Creating decoders for process `\nerv.$proc$nerv2.sv:171$19'.
     1/69: $4\mem_wr_enable[0:0]
     2/69: $4\mem_rd_enable[0:0]
     3/69: $12\illinsn[0:0]
     4/69: $6\next_wr[0:0]
     5/69: $14\npc[31:0]
     6/69: $3\mem_wr_enable[0:0]
     7/69: $3\mem_rd_enable[0:0]
     8/69: $11\illinsn[0:0]
     9/69: $5\next_wr[0:0]
    10/69: $13\npc[31:0]
    11/69: $4\next_rd[31:0]
    12/69: $4\next_wr[0:0]
    13/69: $10\illinsn[0:0]
    14/69: $3\next_rd[31:0]
    15/69: $3\next_wr[0:0]
    16/69: $9\illinsn[0:0]
    17/69: $3\mem_wr_strb[3:0]
    18/69: $2\mem_wr_addr[31:0]
    19/69: $2\mem_wr_strb[3:0]
    20/69: $2\mem_wr_data[31:0]
    21/69: $2\mem_wr_enable[0:0]
    22/69: $8\illinsn[0:0]
    23/69: $2\mem_rd_addr[31:0]
    24/69: $2\mem_rd_func[4:0]
    25/69: $2\mem_rd_reg[4:0]
    26/69: $2\mem_rd_enable[0:0]
    27/69: $7\illinsn[0:0]
    28/69: $12\npc[31:0]
    29/69: $6\illinsn[0:0]
    30/69: $11\npc[31:0]
    31/69: $10\npc[31:0]
    32/69: $9\npc[31:0]
    33/69: $8\npc[31:0]
    34/69: $7\npc[31:0]
    35/69: $6\npc[31:0]
    36/69: $5\npc[31:0]
    37/69: $5\illinsn[0:0]
    38/69: $4\npc[31:0]
    39/69: $4\illinsn[0:0]
    40/69: $3\npc[31:0]
    41/69: $2\next_rd[31:0]
    42/69: $2\next_wr[0:0]
    43/69: $3\illinsn[0:0]
    44/69: $2\npc[31:0]
    45/69: $2\illinsn[0:0]
    46/69: $1\next_rd[31:0]
    47/69: $1\next_wr[0:0]
    48/69: $1\illinsn[0:0]
    49/69: $1\npc[31:0]
    50/69: $1\mem_rd_func[4:0]
    51/69: $1\mem_rd_reg[4:0]
    52/69: $1\mem_rd_addr[31:0]
    53/69: $1\mem_rd_enable[0:0]
    54/69: $1\mem_wr_strb[3:0]
    55/69: $1\mem_wr_data[31:0]
    56/69: $1\mem_wr_addr[31:0]
    57/69: $1\mem_wr_enable[0:0]
    58/69: $0\illinsn[0:0]
    59/69: $0\next_wr[0:0]
    60/69: $0\npc[31:0]
    61/69: $0\mem_rd_enable[0:0]
    62/69: $0\mem_wr_enable[0:0]
    63/69: $0\next_rd[31:0]
    64/69: $0\mem_rd_func[4:0]
    65/69: $0\mem_rd_reg[4:0]
    66/69: $0\mem_rd_addr[31:0]
    67/69: $0\mem_wr_strb[3:0]
    68/69: $0\mem_wr_data[31:0]
    69/69: $0\mem_wr_addr[31:0]
Creating decoders for process `\nerv.$proc$nerv2.sv:81$10'.
     1/1: $0\imem_addr_q[31:0]
Creating decoders for process `\nerv.$proc$nerv2.sv:55$3'.
     1/3: $0\mem_rd_func_q[4:0]
     2/3: $0\mem_rd_reg_q[4:0]
     3/3: $0\mem_rd_enable_q[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\nerv.\mem_rdata' from process `\nerv.$proc$nerv2.sv:341$73'.
No latch inferred for signal `\nerv.\mem_wr_enable' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\mem_wr_addr' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\mem_wr_data' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\mem_wr_strb' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\mem_rd_enable' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\mem_rd_addr' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\mem_rd_reg' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\mem_rd_func' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\npc' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\next_wr' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\next_rd' from process `\nerv.$proc$nerv2.sv:171$19'.
No latch inferred for signal `\nerv.\illinsn' from process `\nerv.$proc$nerv2.sv:171$19'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\nerv.\pc' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$693' with positive edge clock.
Creating register for signal `\nerv.\wb_wr_q' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$694' with positive edge clock.
Creating register for signal `\nerv.\wb_data_q' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$695' with positive edge clock.
Creating register for signal `\nerv.\wb_rd_q' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$696' with positive edge clock.
Creating register for signal `\nerv.\trapped' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$697' with positive edge clock.
Creating register for signal `\nerv.\trapped_q' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$698' with positive edge clock.
Creating register for signal `\nerv.\reset_q' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$699' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv2.sv:363$1_ADDR' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$700' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv2.sv:363$1_DATA' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$701' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv2.sv:363$1_EN' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$702' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv2.sv:365$2_ADDR' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$703' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv2.sv:365$2_DATA' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$704' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv2.sv:365$2_EN' using process `\nerv.$proc$nerv2.sv:352$76'.
  created $dff cell `$procdff$705' with positive edge clock.
Creating register for signal `\nerv.\imem_addr_q' using process `\nerv.$proc$nerv2.sv:81$10'.
  created $dff cell `$procdff$706' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_enable_q' using process `\nerv.$proc$nerv2.sv:55$3'.
  created $dff cell `$procdff$707' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_reg_q' using process `\nerv.$proc$nerv2.sv:55$3'.
  created $dff cell `$procdff$708' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_func_q' using process `\nerv.$proc$nerv2.sv:55$3'.
  created $dff cell `$procdff$709' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\nerv.$proc$nerv2.sv:352$76'.
Removing empty process `nerv.$proc$nerv2.sv:352$76'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv2.sv:341$73'.
Removing empty process `nerv.$proc$nerv2.sv:341$73'.
Found and cleaned up 19 empty switches in `\nerv.$proc$nerv2.sv:171$19'.
Removing empty process `nerv.$proc$nerv2.sv:171$19'.
Removing empty process `nerv.$proc$nerv2.sv:81$10'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv2.sv:55$3'.
Removing empty process `nerv.$proc$nerv2.sv:55$3'.
Cleaned up 27 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~35 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 2 unused cells and 164 unused wires.
<suppressed ~4 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~528 debug messages>
Removed a total of 176 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$278.
    dead port 2/2 on $mux $procmux$263.
    dead port 2/2 on $mux $procmux$299.
    dead port 2/2 on $mux $procmux$307.
    dead port 2/2 on $mux $procmux$315.
    dead port 2/2 on $mux $procmux$323.
    dead port 2/2 on $mux $procmux$331.
    dead port 2/2 on $mux $procmux$340.
    dead port 2/2 on $mux $procmux$349.
    dead port 2/2 on $mux $procmux$358.
    dead port 2/2 on $mux $procmux$367.
    dead port 1/2 on $mux $procmux$170.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$386.
    dead port 2/2 on $mux $procmux$396.
    dead port 2/2 on $mux $procmux$407.
    dead port 2/2 on $mux $procmux$409.
    dead port 2/2 on $mux $procmux$421.
    dead port 1/2 on $mux $procmux$185.
    dead port 2/2 on $mux $procmux$423.
    dead port 2/2 on $mux $procmux$436.
    dead port 2/2 on $mux $procmux$438.
    dead port 2/2 on $mux $procmux$452.
    dead port 2/2 on $mux $procmux$454.
    dead port 2/2 on $mux $procmux$469.
    dead port 2/2 on $mux $procmux$471.
    dead port 2/2 on $mux $procmux$487.
    dead port 2/2 on $mux $procmux$489.
    dead port 2/2 on $mux $procmux$203.
    dead port 2/2 on $mux $procmux$519.
    dead port 2/2 on $mux $procmux$530.
    dead port 2/2 on $mux $procmux$541.
    dead port 2/2 on $mux $procmux$218.
    dead port 2/2 on $mux $procmux$563.
    dead port 2/2 on $mux $procmux$574.
    dead port 2/2 on $mux $procmux$585.
    dead port 2/2 on $mux $procmux$597.
    dead port 2/2 on $mux $procmux$609.
    dead port 2/2 on $mux $procmux$233.
    dead port 2/2 on $mux $procmux$248.
Removed 40 multiplexer ports.
<suppressed ~28 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$290_ANY: { $procmux$247_CMP $procmux$290_CMP [1] $procmux$290_CMP [2] }
    New input vector for $reduce_or cell $procmux$339_ANY: { $procmux$244_CMP $procmux$247_CMP $procmux$339_CMP [1] $procmux$339_CMP [2] $procmux$339_CMP [4] }
    Consolidated identical input bits for $mux cell $procmux$109:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$109_Y
      New ports: A=1'0, B=1'1, Y=$procmux$109_Y [0]
      New connections: $procmux$109_Y [31:1] = { $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] $procmux$109_Y [0] }
    New ctrl vector for $pmux cell $procmux$207: $auto$opt_reduce.cc:132:opt_mux$711
    New ctrl vector for $pmux cell $procmux$512: $auto$opt_reduce.cc:132:opt_mux$713
    New ctrl vector for $pmux cell $procmux$268: $auto$opt_reduce.cc:132:opt_mux$715
    New ctrl vector for $pmux cell $procmux$222: $auto$opt_reduce.cc:132:opt_mux$717
    New ctrl vector for $pmux cell $procmux$620: { $auto$opt_reduce.cc:132:opt_mux$719 $procmux$531_CMP $procmux$249_CMP $procmux$204_CMP }
    New ctrl vector for $pmux cell $procmux$628: { $auto$opt_reduce.cc:132:opt_mux$721 $procmux$598_CMP $procmux$531_CMP $procmux$387_CMP $procmux$341_CMP $procmux$292_CMP $procmux$249_CMP $procmux$204_CMP }
    New ctrl vector for $pmux cell $procmux$253: $auto$opt_reduce.cc:132:opt_mux$723
    Consolidated identical input bits for $mux cell $procmux$95:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$95_Y
      New ports: A=1'0, B=1'1, Y=$procmux$95_Y [0]
      New connections: $procmux$95_Y [31:1] = { $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] $procmux$95_Y [0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$710: { $procmux$193_CMP $procmux$194_CMP $procmux$195_CMP $procmux$196_CMP $procmux$197_CMP $procmux$198_CMP $procmux$199_CMP $procmux$200_CMP $procmux$201_CMP $procmux$202_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$712: { $procmux$242_CMP $procmux$243_CMP $procmux$244_CMP $procmux$247_CMP $procmux$287_CMP $procmux$437_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$714: { $procmux$195_CMP $procmux$196_CMP $procmux$200_CMP $procmux$242_CMP $procmux$243_CMP $procmux$244_CMP $procmux$245_CMP $procmux$246_CMP $procmux$247_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$716: { $procmux$193_CMP $procmux$194_CMP $procmux$195_CMP $procmux$196_CMP $procmux$197_CMP $procmux$198_CMP $procmux$199_CMP $procmux$200_CMP $procmux$201_CMP $procmux$202_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$718: { $procmux$598_CMP $procmux$617_CMP $procmux$618_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$720: { $procmux$617_CMP $procmux$618_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$722: { $procmux$195_CMP $procmux$196_CMP $procmux$200_CMP $procmux$242_CMP $procmux$243_CMP $procmux$244_CMP $procmux$245_CMP $procmux$246_CMP $procmux$247_CMP }
  Optimizing cells in module \nerv.
    Consolidated identical input bits for $mux cell $procmux$112:
      Old ports: A=$procmux$109_Y, B=0, Y=$procmux$112_Y
      New ports: A=$procmux$109_Y [0], B=1'0, Y=$procmux$112_Y [0]
      New connections: $procmux$112_Y [31:1] = { $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$97:
      Old ports: A=0, B=$procmux$95_Y, Y=$0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79
      New ports: A=1'0, B=$procmux$95_Y [0], Y=$0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0]
      New connections: $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [31:1] = { $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] $0$memwr$\regfile$nerv2.sv:363$1_EN[31:0]$79 [0] }
  Optimizing cells in module \nerv.
    Consolidated identical input bits for $mux cell $procmux$114:
      Old ports: A=0, B=$procmux$112_Y, Y=$0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82
      New ports: A=1'0, B=$procmux$112_Y [0], Y=$0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0]
      New connections: $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [31:1] = { $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [0] }
  Optimizing cells in module \nerv.
Performed a total of 21 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 189 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed cell nerv.$ternary$nerv2.sv:66$5 ($mux).
Removed cell nerv.$ternary$nerv2.sv:67$7 ($mux).
Removed cell nerv.$ternary$nerv2.sv:68$9 ($mux).
Removed top 29 bits (of 32) from port B of cell nerv.$add$nerv2.sv:173$20 ($add).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv2.sv:207$25 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv2.sv:222$30 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv2.sv:238$45 ($and).
Removed top 27 bits (of 32) from port B of cell nerv.$shl$nerv2.sv:275$51 ($shl).
Removed top 20 bits (of 32) from port B of cell nerv.$lt$nerv2.sv:287$54 ($lt).
Removed top 27 bits (of 32) from port B of cell nerv.$shr$nerv2.sv:342$75 ($shr).
Removed top 29 bits (of 32) from mux cell nerv.$ternary$nerv2.sv:379$90 ($mux).
Removed top 31 bits (of 32) from port A of cell nerv.$sub$nerv2.sv:379$91 ($sub).
Removed top 29 bits (of 32) from port B of cell nerv.$sub$nerv2.sv:379$91 ($sub).
Removed cell nerv.$procmux$100 ($mux).
Removed cell nerv.$procmux$102 ($mux).
Removed cell nerv.$procmux$105 ($mux).
Removed cell nerv.$procmux$107 ($mux).
Removed cell nerv.$procmux$121 ($mux).
Removed cell nerv.$procmux$116 ($mux).
Removed cell nerv.$procmux$119 ($mux).
Removed cell nerv.$procmux$128 ($mux).
Removed cell nerv.$procmux$123 ($mux).
Removed cell nerv.$procmux$126 ($mux).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$158_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$194_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$193_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$195_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$196_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$197_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$198_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$199_CMP0 ($eq).
Removed top 9 bits (of 10) from port B of cell nerv.$procmux$200_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$201_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$204_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$245_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$246_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$249_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$290_CMP1 ($eq).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$287_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$290_CMP2 ($eq).
Removed cell nerv.$procmux$289 ($mux).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$292_CMP0 ($eq).
Removed cell nerv.$procmux$291 ($mux).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$297 ($mux).
Removed cell nerv.$procmux$305 ($mux).
Removed cell nerv.$procmux$313 ($mux).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$339_CMP1 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$339_CMP2 ($eq).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$338 ($mux).
Removed top 5 bits (of 7) from port B of cell nerv.$procmux$341_CMP0 ($eq).
Removed cell nerv.$procmux$347 ($mux).
Removed cell nerv.$procmux$356 ($mux).
Removed cell nerv.$procmux$504 ($mux).
Removed cell nerv.$procmux$552 ($mux).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$617_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$618_CMP0 ($eq).
Removed cell nerv.$procmux$651 ($mux).
Removed cell nerv.$procmux$657 ($mux).
Removed cell nerv.$procmux$663 ($mux).
Removed cell nerv.$procmux$674 ($mux).
Removed cell nerv.$procmux$679 ($mux).
Removed cell nerv.$procmux$684 ($mux).
Removed top 31 bits (of 32) from FF cell nerv.$procdff$702 ($dff).
Removed top 31 bits (of 32) from FF cell nerv.$procdff$705 ($dff).
Removed top 31 bits (of 32) from wire nerv.$lt$nerv2.sv:287$54_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv2.sv:288$55_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv2.sv:305$65_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv2.sv:306$66_Y.
Removed top 29 bits (of 32) from wire nerv.$ternary$nerv2.sv:379$90_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 9 cells in module nerv that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$nerv2.sv:309$69 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$204_CMP $procmux$195_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
    Found 1 candidates: $sshr$nerv2.sv:294$61
    Analyzing resource sharing with $sshr$nerv2.sv:294$61 ($sshr):
      Found 1 activation_patterns using ctrl signal { $procmux$249_CMP $procmux$195_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
      Activation pattern for cell $sshr$nerv2.sv:309$69: { $procmux$204_CMP $procmux$195_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $sshr$nerv2.sv:294$61: { $procmux$249_CMP $procmux$195_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 4'1110
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Size of SAT problem: 8 cells, 117 variables, 297 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $sshr$nerv2.sv:309$69: $auto$share.cc:976:make_cell_activation_logic$729
      New cell: $auto$share.cc:666:make_supercell$736 ($sshr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$736 ($sshr):
    Found 2 activation_patterns using ctrl signal { $procmux$249_CMP $procmux$204_CMP $procmux$195_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shr$nerv2.sv:342$75 ($shr):
    Found 5 activation_patterns using ctrl signal { $procmux$159_CMP $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP }.
    Found 2 candidates: $shr$nerv2.sv:308$68 $shr$nerv2.sv:293$60
    Analyzing resource sharing with $shr$nerv2.sv:308$68 ($shr):
      Found 1 activation_patterns using ctrl signal { $procmux$204_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv2.sv:342$75: { $procmux$159_CMP $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP } = 4'0000
      Activation pattern for cell $shr$nerv2.sv:342$75: $procmux$156_CMP = 1'1
      Activation pattern for cell $shr$nerv2.sv:342$75: $procmux$157_CMP = 1'1
      Activation pattern for cell $shr$nerv2.sv:342$75: $procmux$158_CMP = 1'1
      Activation pattern for cell $shr$nerv2.sv:342$75: $procmux$159_CMP = 1'1
      Activation pattern for cell $shr$nerv2.sv:308$68: { $procmux$204_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 4'1110
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$157_CMP
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$158_CMP
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$159_CMP
      Adding exclusive control bits: $procmux$157_CMP vs. $procmux$158_CMP
      Adding exclusive control bits: $procmux$157_CMP vs. $procmux$159_CMP
      Adding exclusive control bits: $procmux$158_CMP vs. $procmux$159_CMP
      Size of SAT problem: 11 cells, 155 variables, 399 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$204_CMP $procmux$196_CMP $procmux$159_CMP $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 8'11000010
    Analyzing resource sharing with $shr$nerv2.sv:293$60 ($shr):
      Found 1 activation_patterns using ctrl signal { $procmux$249_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv2.sv:342$75: { $procmux$159_CMP $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP } = 4'0000
      Activation pattern for cell $shr$nerv2.sv:342$75: $procmux$156_CMP = 1'1
      Activation pattern for cell $shr$nerv2.sv:342$75: $procmux$157_CMP = 1'1
      Activation pattern for cell $shr$nerv2.sv:342$75: $procmux$158_CMP = 1'1
      Activation pattern for cell $shr$nerv2.sv:342$75: $procmux$159_CMP = 1'1
      Activation pattern for cell $shr$nerv2.sv:293$60: { $procmux$249_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 4'1110
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$157_CMP
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$158_CMP
      Adding exclusive control bits: $procmux$156_CMP vs. $procmux$159_CMP
      Adding exclusive control bits: $procmux$157_CMP vs. $procmux$158_CMP
      Adding exclusive control bits: $procmux$157_CMP vs. $procmux$159_CMP
      Adding exclusive control bits: $procmux$158_CMP vs. $procmux$159_CMP
      Size of SAT problem: 11 cells, 155 variables, 399 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$249_CMP $procmux$196_CMP $procmux$159_CMP $procmux$158_CMP $procmux$157_CMP $procmux$156_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 8'11000010
  Analyzing resource sharing options for $shr$nerv2.sv:308$68 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$204_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
    Found 1 candidates: $shr$nerv2.sv:293$60
    Analyzing resource sharing with $shr$nerv2.sv:293$60 ($shr):
      Found 1 activation_patterns using ctrl signal { $procmux$249_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv2.sv:308$68: { $procmux$204_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv2.sv:293$60: { $procmux$249_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 4'1110
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Size of SAT problem: 8 cells, 117 variables, 297 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shr$nerv2.sv:308$68: $auto$share.cc:976:make_cell_activation_logic$739
      New cell: $auto$share.cc:666:make_supercell$746 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$746 ($shr):
    Found 2 activation_patterns using ctrl signal { $procmux$249_CMP $procmux$204_CMP $procmux$196_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shl$nerv2.sv:304$64 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$204_CMP $procmux$200_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
    Found 1 candidates: $shl$nerv2.sv:292$59
    Analyzing resource sharing with $shl$nerv2.sv:292$59 ($shl):
      Found 1 activation_patterns using ctrl signal { $procmux$249_CMP $procmux$200_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
      Activation pattern for cell $shl$nerv2.sv:304$64: { $procmux$204_CMP $procmux$200_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shl$nerv2.sv:292$59: { $procmux$249_CMP $procmux$200_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q } = 4'1110
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Adding exclusive control bits: $procmux$204_CMP vs. $procmux$249_CMP
      Size of SAT problem: 8 cells, 117 variables, 297 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shl$nerv2.sv:304$64: $auto$share.cc:976:make_cell_activation_logic$749
      New cell: $auto$share.cc:666:make_supercell$756 ($shl)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$756 ($shl):
    Found 2 activation_patterns using ctrl signal { $procmux$249_CMP $procmux$204_CMP $procmux$200_CMP $logic_and$nerv2.sv:357$87_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $memrd$\regfile$nerv2.sv:91$17 ($memrd):
    Found 1 activation_patterns using ctrl signal $logic_not$nerv2.sv:91$16_Y.
    Found 1 candidates: $memrd$\regfile$nerv2.sv:90$14
    Analyzing resource sharing with $memrd$\regfile$nerv2.sv:90$14 ($memrd):
      Found 1 activation_patterns using ctrl signal $logic_not$nerv2.sv:90$13_Y.
      Forbidden control signals for this pair of cells: { $procmux$529_CMP $procmux$385_CMP $procmux$339_CTRL $procmux$290_CTRL $ge$nerv2.sv:235$43_Y $lt$nerv2.sv:234$41_Y $ge$nerv2.sv:233$39_Y $lt$nerv2.sv:232$37_Y $ne$nerv2.sv:231$35_Y $eq$nerv2.sv:230$33_Y \illinsn \mem_wr_enable }
      Activation pattern for cell $memrd$\regfile$nerv2.sv:91$17: $logic_not$nerv2.sv:91$16_Y = 1'0
      Activation pattern for cell $memrd$\regfile$nerv2.sv:90$14: $logic_not$nerv2.sv:90$13_Y = 1'0
      Size of SAT problem: 2 cells, 27 variables, 51 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $logic_not$nerv2.sv:91$16_Y $logic_not$nerv2.sv:90$13_Y } = 2'00
  Analyzing resource sharing options for $memrd$\regfile$nerv2.sv:90$14 ($memrd):
    Found 1 activation_patterns using ctrl signal $logic_not$nerv2.sv:90$13_Y.
    No candidates found.
Removing 6 cells in module nerv:
  Removing cell $shl$nerv2.sv:292$59 ($shl).
  Removing cell $shl$nerv2.sv:304$64 ($shl).
  Removing cell $shr$nerv2.sv:293$60 ($shr).
  Removing cell $shr$nerv2.sv:308$68 ($shr).
  Removing cell $sshr$nerv2.sv:294$61 ($sshr).
  Removing cell $sshr$nerv2.sv:309$69 ($sshr).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$428611b5d438e29cebfd18261be0c8e5ae5db6e9\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$dc6060208f0369ff43b26b7eee8e43bf61e4b025\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~638 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~3 debug messages>

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 57 unused wires.
<suppressed ~7 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module nerv:
  creating $macc model for $add$nerv2.sv:173$20 ($add).
  creating $macc model for $add$nerv2.sv:200$23 ($add).
  creating $macc model for $add$nerv2.sv:206$24 ($add).
  creating $macc model for $add$nerv2.sv:218$28 ($add).
  creating $macc model for $add$nerv2.sv:230$34 ($add).
  creating $macc model for $add$nerv2.sv:262$49 ($add).
  creating $macc model for $add$nerv2.sv:302$62 ($add).
  creating $macc model for $sub$nerv2.sv:303$63 ($sub).
  creating $macc model for $sub$nerv2.sv:379$91 ($sub).
  creating $alu model for $macc $sub$nerv2.sv:379$91.
  creating $alu model for $macc $sub$nerv2.sv:303$63.
  creating $alu model for $macc $add$nerv2.sv:302$62.
  creating $alu model for $macc $add$nerv2.sv:262$49.
  creating $alu model for $macc $add$nerv2.sv:230$34.
  creating $alu model for $macc $add$nerv2.sv:218$28.
  creating $alu model for $macc $add$nerv2.sv:206$24.
  creating $alu model for $macc $add$nerv2.sv:200$23.
  creating $alu model for $macc $add$nerv2.sv:173$20.
  creating $alu model for $ge$nerv2.sv:233$39 ($ge): new $alu
  creating $alu model for $ge$nerv2.sv:235$43 ($ge): new $alu
  creating $alu model for $lt$nerv2.sv:232$37 ($lt): merged with $ge$nerv2.sv:233$39.
  creating $alu model for $lt$nerv2.sv:234$41 ($lt): merged with $ge$nerv2.sv:235$43.
  creating $alu model for $lt$nerv2.sv:287$54 ($lt): new $alu
  creating $alu model for $lt$nerv2.sv:288$55 ($lt): new $alu
  creating $alu model for $lt$nerv2.sv:305$65 ($lt): merged with $ge$nerv2.sv:233$39.
  creating $alu model for $lt$nerv2.sv:306$66 ($lt): merged with $ge$nerv2.sv:235$43.
  creating $alu model for $eq$nerv2.sv:230$33 ($eq): merged with $ge$nerv2.sv:235$43.
  creating $alu model for $ne$nerv2.sv:231$35 ($ne): merged with $ge$nerv2.sv:235$43.
  creating $alu cell for $lt$nerv2.sv:287$54: $auto$alumacc.cc:474:replace_alu$789
  creating $alu cell for $add$nerv2.sv:173$20: $auto$alumacc.cc:474:replace_alu$802
  creating $alu cell for $add$nerv2.sv:200$23: $auto$alumacc.cc:474:replace_alu$805
  creating $alu cell for $add$nerv2.sv:206$24: $auto$alumacc.cc:474:replace_alu$808
  creating $alu cell for $lt$nerv2.sv:288$55: $auto$alumacc.cc:474:replace_alu$811
  creating $alu cell for $add$nerv2.sv:218$28: $auto$alumacc.cc:474:replace_alu$816
  creating $alu cell for $add$nerv2.sv:230$34: $auto$alumacc.cc:474:replace_alu$819
  creating $alu cell for $add$nerv2.sv:262$49: $auto$alumacc.cc:474:replace_alu$822
  creating $alu cell for $ge$nerv2.sv:235$43, $lt$nerv2.sv:234$41, $lt$nerv2.sv:306$66, $eq$nerv2.sv:230$33, $ne$nerv2.sv:231$35: $auto$alumacc.cc:474:replace_alu$825
  creating $alu cell for $ge$nerv2.sv:233$39, $lt$nerv2.sv:232$37, $lt$nerv2.sv:305$65: $auto$alumacc.cc:474:replace_alu$840
  creating $alu cell for $add$nerv2.sv:302$62: $auto$alumacc.cc:474:replace_alu$855
  creating $alu cell for $sub$nerv2.sv:303$63: $auto$alumacc.cc:474:replace_alu$858
  creating $alu cell for $sub$nerv2.sv:379$91: $auto$alumacc.cc:474:replace_alu$861
  created 13 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~3 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$849: { $auto$rtlil.cc:1864:Xor$846 $auto$rtlil.cc:1835:ReduceAnd$848 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$832: { $auto$rtlil.cc:1832:Not$829 $auto$rtlil.cc:1835:ReduceAnd$831 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$830: { $auto$alumacc.cc:490:replace_alu$826 [0] $auto$alumacc.cc:490:replace_alu$826 [1] $auto$alumacc.cc:490:replace_alu$826 [2] $auto$alumacc.cc:490:replace_alu$826 [3] $auto$alumacc.cc:490:replace_alu$826 [4] $auto$alumacc.cc:490:replace_alu$826 [5] $auto$alumacc.cc:490:replace_alu$826 [6] $auto$alumacc.cc:490:replace_alu$826 [7] $auto$alumacc.cc:490:replace_alu$826 [8] $auto$alumacc.cc:490:replace_alu$826 [9] $auto$alumacc.cc:490:replace_alu$826 [10] $auto$alumacc.cc:490:replace_alu$826 [11] $auto$alumacc.cc:490:replace_alu$826 [12] $auto$alumacc.cc:490:replace_alu$826 [13] $auto$alumacc.cc:490:replace_alu$826 [14] $auto$alumacc.cc:490:replace_alu$826 [15] $auto$alumacc.cc:490:replace_alu$826 [16] $auto$alumacc.cc:490:replace_alu$826 [17] $auto$alumacc.cc:490:replace_alu$826 [18] $auto$alumacc.cc:490:replace_alu$826 [19] $auto$alumacc.cc:490:replace_alu$826 [20] $auto$alumacc.cc:490:replace_alu$826 [21] $auto$alumacc.cc:490:replace_alu$826 [22] $auto$alumacc.cc:490:replace_alu$826 [23] $auto$alumacc.cc:490:replace_alu$826 [24] $auto$alumacc.cc:490:replace_alu$826 [25] $auto$alumacc.cc:490:replace_alu$826 [26] $auto$alumacc.cc:490:replace_alu$826 [27] $auto$alumacc.cc:490:replace_alu$826 [28] $auto$alumacc.cc:490:replace_alu$826 [29] $auto$alumacc.cc:490:replace_alu$826 [30] $auto$alumacc.cc:490:replace_alu$826 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$792: { $auto$alumacc.cc:490:replace_alu$790 [0] $auto$alumacc.cc:490:replace_alu$790 [1] $auto$alumacc.cc:490:replace_alu$790 [2] $auto$alumacc.cc:490:replace_alu$790 [3] $auto$alumacc.cc:490:replace_alu$790 [4] $auto$alumacc.cc:490:replace_alu$790 [5] $auto$alumacc.cc:490:replace_alu$790 [6] $auto$alumacc.cc:490:replace_alu$790 [7] $auto$alumacc.cc:490:replace_alu$790 [8] $auto$alumacc.cc:490:replace_alu$790 [9] $auto$alumacc.cc:490:replace_alu$790 [10] $auto$alumacc.cc:490:replace_alu$790 [11] $auto$alumacc.cc:490:replace_alu$790 [12] $auto$alumacc.cc:490:replace_alu$790 [13] $auto$alumacc.cc:490:replace_alu$790 [14] $auto$alumacc.cc:490:replace_alu$790 [15] $auto$alumacc.cc:490:replace_alu$790 [16] $auto$alumacc.cc:490:replace_alu$790 [17] $auto$alumacc.cc:490:replace_alu$790 [18] $auto$alumacc.cc:490:replace_alu$790 [19] $auto$alumacc.cc:490:replace_alu$790 [20] $auto$alumacc.cc:490:replace_alu$790 [21] $auto$alumacc.cc:490:replace_alu$790 [22] $auto$alumacc.cc:490:replace_alu$790 [23] $auto$alumacc.cc:490:replace_alu$790 [24] $auto$alumacc.cc:490:replace_alu$790 [25] $auto$alumacc.cc:490:replace_alu$790 [26] $auto$alumacc.cc:490:replace_alu$790 [27] $auto$alumacc.cc:490:replace_alu$790 [28] $auto$alumacc.cc:490:replace_alu$790 [29] $auto$alumacc.cc:490:replace_alu$790 [30] $auto$alumacc.cc:490:replace_alu$790 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$847: { $auto$alumacc.cc:490:replace_alu$841 [0] $auto$alumacc.cc:490:replace_alu$841 [1] $auto$alumacc.cc:490:replace_alu$841 [2] $auto$alumacc.cc:490:replace_alu$841 [3] $auto$alumacc.cc:490:replace_alu$841 [4] $auto$alumacc.cc:490:replace_alu$841 [5] $auto$alumacc.cc:490:replace_alu$841 [6] $auto$alumacc.cc:490:replace_alu$841 [7] $auto$alumacc.cc:490:replace_alu$841 [8] $auto$alumacc.cc:490:replace_alu$841 [9] $auto$alumacc.cc:490:replace_alu$841 [10] $auto$alumacc.cc:490:replace_alu$841 [11] $auto$alumacc.cc:490:replace_alu$841 [12] $auto$alumacc.cc:490:replace_alu$841 [13] $auto$alumacc.cc:490:replace_alu$841 [14] $auto$alumacc.cc:490:replace_alu$841 [15] $auto$alumacc.cc:490:replace_alu$841 [16] $auto$alumacc.cc:490:replace_alu$841 [17] $auto$alumacc.cc:490:replace_alu$841 [18] $auto$alumacc.cc:490:replace_alu$841 [19] $auto$alumacc.cc:490:replace_alu$841 [20] $auto$alumacc.cc:490:replace_alu$841 [21] $auto$alumacc.cc:490:replace_alu$841 [22] $auto$alumacc.cc:490:replace_alu$841 [23] $auto$alumacc.cc:490:replace_alu$841 [24] $auto$alumacc.cc:490:replace_alu$841 [25] $auto$alumacc.cc:490:replace_alu$841 [26] $auto$alumacc.cc:490:replace_alu$841 [27] $auto$alumacc.cc:490:replace_alu$841 [28] $auto$alumacc.cc:490:replace_alu$841 [29] $auto$alumacc.cc:490:replace_alu$841 [30] $auto$alumacc.cc:490:replace_alu$841 [31] }
  Optimizing cells in module \nerv.
Performed a total of 5 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 11 unused wires.
<suppressed ~2 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\regfile$nerv2.sv:363$92' in module `\nerv': merged $dff to cell.
Checking cell `$memwr$\regfile$nerv2.sv:365$93' in module `\nerv': merged $dff to cell.
Checking cell `$memrd$\regfile$nerv2.sv:90$14' in module `\nerv': no (compatible) $dff found.
Checking cell `$memrd$\regfile$nerv2.sv:91$17' in module `\nerv': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory nerv.regfile by address:
  New clock domain: posedge \clock
    Port 0 ($memwr$\regfile$nerv2.sv:363$92) has addr \mem_rd_reg_q.
      Active bits: 11111111111111111111111111111111
    Port 1 ($memwr$\regfile$nerv2.sv:365$93) has addr \wb_rd_q.
      Active bits: 11111111111111111111111111111111
Consolidating write ports of memory nerv.regfile using sat-based resource sharing:
  Port 0 ($memwr$\regfile$nerv2.sv:363$92) on posedge \clock: considered
  Port 1 ($memwr$\regfile$nerv2.sv:365$93) on posedge \clock: considered
  Common input cone for all EN signals: 10 cells.
  Size of unconstrained SAT problem: 61 variables, 144 clauses
  Merging port 0 into port 1.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\regfile' in module `\nerv':
  $memwr$\regfile$nerv2.sv:365$93 ($memwr)
  $memrd$\regfile$nerv2.sv:90$14 ($memrd)
  $memrd$\regfile$nerv2.sv:91$17 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing nerv.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~54 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \regfile in module \nerv:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~10 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $auto$memory_share.cc:646:consolidate_wr_using_sat$875: $0$memwr$\regfile$nerv2.sv:365$2_EN[31:0]$82 [31] -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~58 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$339_ANY: { $2\next_wr[0:0] $procmux$244_CMP $procmux$339_CMP [1] $procmux$339_CMP [2] $procmux$339_CMP [4] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$722: { $2\next_wr[0:0] $procmux$195_CMP $procmux$196_CMP $procmux$200_CMP $procmux$242_CMP $procmux$243_CMP $procmux$244_CMP $procmux$245_CMP $procmux$246_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$712: { $2\next_wr[0:0] $procmux$242_CMP $procmux$243_CMP $procmux$244_CMP $procmux$287_CMP $procmux$437_CMP }
    Consolidated identical input bits for $pmux cell $procmux$155:
      Old ports: A=$shr$nerv2.sv:342$75_Y, B={ $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7:0] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15:0] 24'000000000000000000000000 $shr$nerv2.sv:342$75_Y [7:0] 16'0000000000000000 $shr$nerv2.sv:342$75_Y [15:0] }, Y=\mem_rdata
      New ports: A=$shr$nerv2.sv:342$75_Y [31:8], B={ $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [7] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15] $shr$nerv2.sv:342$75_Y [15:8] 40'0000000000000000000000000000000000000000 $shr$nerv2.sv:342$75_Y [15:8] }, Y=\mem_rdata [31:8]
      New connections: \mem_rdata [7:0] = $shr$nerv2.sv:342$75_Y [7:0]
    Consolidated identical input bits for $pmux cell $procmux$286:
      Old ports: A=4'1111, B=8'00010011, Y=$3\mem_wr_strb[3:0]
      New ports: A=2'11, B=4'0001, Y=$3\mem_wr_strb[3:0] [2:1]
      New connections: { $3\mem_wr_strb[3:0] [3] $3\mem_wr_strb[3:0] [0] } = { $3\mem_wr_strb[3:0] [2] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$384:
      Old ports: A=$5\npc[31:0], B={ $5\npc[31:0] [31:2] 2'00 }, Y=$12\npc[31:0]
      New ports: A=$5\npc[31:0] [1:0], B=2'00, Y=$12\npc[31:0] [1:0]
      New connections: $12\npc[31:0] [31:2] = $5\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$528:
      Old ports: A=$3\npc[31:0], B={ $3\npc[31:0] [31:2] 2'00 }, Y=$4\npc[31:0]
      New ports: A=$3\npc[31:0] [1:0], B=2'00, Y=$4\npc[31:0] [1:0]
      New connections: $4\npc[31:0] [31:2] = $3\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$595:
      Old ports: A=$add$nerv2.sv:206$24_Y, B={ $add$nerv2.sv:206$24_Y [31:2] 2'00 }, Y=$2\npc[31:0]
      New ports: A=$add$nerv2.sv:206$24_Y [1:0], B=2'00, Y=$2\npc[31:0] [1:0]
      New connections: $2\npc[31:0] [31:2] = $add$nerv2.sv:206$24_Y [31:2]
    Consolidated identical input bits for $mux cell $ternary$nerv2.sv:379$90:
      Old ports: A=3'000, B=3'100, Y=$auto$wreduce.cc:455:run$728 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$728 [2]
      New connections: $auto$wreduce.cc:455:run$728 [1:0] = 2'00
  Optimizing cells in module \nerv.
Performed a total of 9 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 97 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~58 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod$constmap:6e3026a439ed4a6e7983ca0e910890cc59b2f7b2$paramod$639848c0e6c2f57a2478574ca6c566bbce1f0807\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $or.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_or.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr'.

2.30.30. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1659 debug messages>

2.30.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~192 debug messages>
Removed 0 unused cells and 10 unused wires.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_pmux\WIDTH=24\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr'.

2.30.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.30.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~352 debug messages>
Removed 0 unused cells and 15 unused wires.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=10 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=12\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=8 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~693 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~1262 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~2343 debug messages>
Removed a total of 781 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 306 unused cells and 1045 unused wires.
<suppressed ~307 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$802.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$808.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$819.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[10].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [10]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [11]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [12]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [13]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [14]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [15]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [16]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [17]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [18]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [19]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [1]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [20]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [21]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [22]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [23]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [24]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [25]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [26]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [27]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [28]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [29]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [30]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[3].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [3]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[4].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [4]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[5].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [5]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[6].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [6]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[7].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [7]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[8].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [8]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[9].carry: CO=$auto$alumacc.cc:474:replace_alu$861.C [9]
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$802.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$808.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$819.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[0].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[10].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[11].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[12].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[13].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[14].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[15].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[16].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[17].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[18].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[19].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[20].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[21].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[22].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[23].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[24].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[25].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[26].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[27].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[28].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[29].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[30].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[31].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[4].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[5].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[6].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[7].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[8].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[9].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~487 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 2 unused cells and 138 unused wires.
<suppressed ~3 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$802.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[2].carry: CO=$auto$alumacc.cc:474:replace_alu$861.BB [2]
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$802.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$861.slice[3].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~44 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$802.slice[2].carry: CO=\pc [2]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[2].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$802.slice[3].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~26 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[3].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[4].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[5].adder back to logic.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.36. Rerunning OPT passes. (Removed registers in this run.)

2.31.37. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[5].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[6].adder back to logic.

2.31.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.40. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.42. Rerunning OPT passes. (Removed registers in this run.)

2.31.43. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[6].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[7].adder back to logic.

2.31.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.46. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.48. Rerunning OPT passes. (Removed registers in this run.)

2.31.49. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[7].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[8].adder back to logic.

2.31.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.52. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.54. Rerunning OPT passes. (Removed registers in this run.)

2.31.55. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[8].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[9].adder back to logic.

2.31.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.57. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.58. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.60. Rerunning OPT passes. (Removed registers in this run.)

2.31.61. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[9].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[10].adder back to logic.

2.31.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.64. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.66. Rerunning OPT passes. (Removed registers in this run.)

2.31.67. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[10].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[11].adder back to logic.

2.31.68. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.70. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.71. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.72. Rerunning OPT passes. (Removed registers in this run.)

2.31.73. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[11].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$805.slice[12].adder back to logic.

2.31.74. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~11 debug messages>

2.31.75. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.76. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.77. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.31.78. Rerunning OPT passes. (Removed registers in this run.)

2.31.79. Running ICE40 specific optimizations.

2.31.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.31.81. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.31.82. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.31.84. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module nerv:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1593 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [0] -> \regfile[17] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1594 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [1] -> \regfile[17] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1595 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [2] -> \regfile[17] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1596 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [3] -> \regfile[17] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1597 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [4] -> \regfile[17] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1598 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [5] -> \regfile[17] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1599 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [6] -> \regfile[17] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1600 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [7] -> \regfile[17] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1601 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [8] -> \regfile[17] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1602 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [9] -> \regfile[17] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1603 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [10] -> \regfile[17] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1604 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [11] -> \regfile[17] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1605 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [12] -> \regfile[17] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1606 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [13] -> \regfile[17] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1607 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [14] -> \regfile[17] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1608 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [15] -> \regfile[17] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1609 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [16] -> \regfile[17] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1610 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [17] -> \regfile[17] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1611 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [18] -> \regfile[17] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1612 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [19] -> \regfile[17] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1613 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [20] -> \regfile[17] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1614 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [21] -> \regfile[17] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1615 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [22] -> \regfile[17] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1616 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [23] -> \regfile[17] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1617 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [24] -> \regfile[17] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1618 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [25] -> \regfile[17] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1619 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [26] -> \regfile[17] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1620 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [27] -> \regfile[17] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1621 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [28] -> \regfile[17] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1622 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [29] -> \regfile[17] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1623 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [30] -> \regfile[17] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1624 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1302 [31] -> \regfile[17] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1697 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [0] -> \regfile[6] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1698 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [1] -> \regfile[6] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1699 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [2] -> \regfile[6] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1700 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [3] -> \regfile[6] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1701 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [4] -> \regfile[6] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1702 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [5] -> \regfile[6] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1703 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [6] -> \regfile[6] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1704 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [7] -> \regfile[6] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1705 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [8] -> \regfile[6] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1706 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [9] -> \regfile[6] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1707 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [10] -> \regfile[6] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1708 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [11] -> \regfile[6] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1709 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [12] -> \regfile[6] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1710 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [13] -> \regfile[6] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1711 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [14] -> \regfile[6] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1712 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [15] -> \regfile[6] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1713 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [16] -> \regfile[6] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1714 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [17] -> \regfile[6] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1715 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [18] -> \regfile[6] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1716 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [19] -> \regfile[6] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1717 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [20] -> \regfile[6] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1718 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [21] -> \regfile[6] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1719 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [22] -> \regfile[6] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1720 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [23] -> \regfile[6] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1721 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [24] -> \regfile[6] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1722 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [25] -> \regfile[6] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1723 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [26] -> \regfile[6] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1724 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [27] -> \regfile[6] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1725 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [28] -> \regfile[6] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1726 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [29] -> \regfile[6] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1727 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [30] -> \regfile[6] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1728 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1222 [31] -> \regfile[6] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1731 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [0] -> \regfile[14] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1732 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [1] -> \regfile[14] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1733 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [2] -> \regfile[14] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1734 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [3] -> \regfile[14] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1735 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [4] -> \regfile[14] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1736 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [5] -> \regfile[14] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1737 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [6] -> \regfile[14] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1738 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [7] -> \regfile[14] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1739 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [8] -> \regfile[14] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1740 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [9] -> \regfile[14] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1741 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [10] -> \regfile[14] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1742 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [11] -> \regfile[14] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1743 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [12] -> \regfile[14] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1744 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [13] -> \regfile[14] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1745 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [14] -> \regfile[14] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1746 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [15] -> \regfile[14] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1747 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [16] -> \regfile[14] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1748 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [17] -> \regfile[14] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1749 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [18] -> \regfile[14] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1750 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [19] -> \regfile[14] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1751 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [20] -> \regfile[14] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1752 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [21] -> \regfile[14] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1753 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [22] -> \regfile[14] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1754 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [23] -> \regfile[14] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1755 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [24] -> \regfile[14] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1756 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [25] -> \regfile[14] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1757 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [26] -> \regfile[14] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1758 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [27] -> \regfile[14] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1759 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [28] -> \regfile[14] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1760 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [29] -> \regfile[14] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1761 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [30] -> \regfile[14] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1762 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1278 [31] -> \regfile[14] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1763 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [0] -> \regfile[11] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1764 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [1] -> \regfile[11] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1765 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [2] -> \regfile[11] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1766 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [3] -> \regfile[11] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1767 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [4] -> \regfile[11] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1768 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [5] -> \regfile[11] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1769 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [6] -> \regfile[11] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1770 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [7] -> \regfile[11] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1771 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [8] -> \regfile[11] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1772 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [9] -> \regfile[11] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1773 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [10] -> \regfile[11] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1774 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [11] -> \regfile[11] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1775 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [12] -> \regfile[11] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1776 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [13] -> \regfile[11] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1777 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [14] -> \regfile[11] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1778 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [15] -> \regfile[11] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1779 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [16] -> \regfile[11] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1780 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [17] -> \regfile[11] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1781 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [18] -> \regfile[11] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1782 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [19] -> \regfile[11] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1783 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [20] -> \regfile[11] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1784 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [21] -> \regfile[11] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1785 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [22] -> \regfile[11] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1786 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [23] -> \regfile[11] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1787 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [24] -> \regfile[11] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1788 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [25] -> \regfile[11] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1789 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [26] -> \regfile[11] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1790 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [27] -> \regfile[11] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1791 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [28] -> \regfile[11] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1792 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [29] -> \regfile[11] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1793 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [30] -> \regfile[11] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1794 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1258 [31] -> \regfile[11] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1827 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [0] -> \regfile[3] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1828 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [1] -> \regfile[3] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1829 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [2] -> \regfile[3] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1830 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [3] -> \regfile[3] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1831 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [4] -> \regfile[3] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1832 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [5] -> \regfile[3] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1833 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [6] -> \regfile[3] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1834 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [7] -> \regfile[3] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1835 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [8] -> \regfile[3] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1836 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [9] -> \regfile[3] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1837 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [10] -> \regfile[3] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1838 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [11] -> \regfile[3] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1839 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [12] -> \regfile[3] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1840 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [13] -> \regfile[3] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1841 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [14] -> \regfile[3] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1842 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [15] -> \regfile[3] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1843 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [16] -> \regfile[3] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1844 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [17] -> \regfile[3] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1845 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [18] -> \regfile[3] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1846 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [19] -> \regfile[3] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1847 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [20] -> \regfile[3] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1848 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [21] -> \regfile[3] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1849 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [22] -> \regfile[3] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1850 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [23] -> \regfile[3] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1851 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [24] -> \regfile[3] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1852 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [25] -> \regfile[3] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1853 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [26] -> \regfile[3] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1854 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [27] -> \regfile[3] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1855 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [28] -> \regfile[3] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1856 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [29] -> \regfile[3] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1857 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [30] -> \regfile[3] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1858 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1200 [31] -> \regfile[3] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1859 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [0] -> \regfile[2] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1860 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [1] -> \regfile[2] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1861 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [2] -> \regfile[2] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1862 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [3] -> \regfile[2] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1863 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [4] -> \regfile[2] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1864 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [5] -> \regfile[2] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1865 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [6] -> \regfile[2] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1866 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [7] -> \regfile[2] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1867 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [8] -> \regfile[2] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1868 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [9] -> \regfile[2] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1869 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [10] -> \regfile[2] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1870 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [11] -> \regfile[2] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1871 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [12] -> \regfile[2] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1872 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [13] -> \regfile[2] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1873 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [14] -> \regfile[2] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1874 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [15] -> \regfile[2] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1875 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [16] -> \regfile[2] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1876 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [17] -> \regfile[2] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1877 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [18] -> \regfile[2] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1878 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [19] -> \regfile[2] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1879 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [20] -> \regfile[2] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1880 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [21] -> \regfile[2] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1881 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [22] -> \regfile[2] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1882 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [23] -> \regfile[2] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1883 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [24] -> \regfile[2] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1884 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [25] -> \regfile[2] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1885 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [26] -> \regfile[2] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1886 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [27] -> \regfile[2] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1887 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [28] -> \regfile[2] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1888 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [29] -> \regfile[2] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1889 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [30] -> \regfile[2] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1890 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1192 [31] -> \regfile[2] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1893 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [0] -> \regfile[16] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1894 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [1] -> \regfile[16] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1895 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [2] -> \regfile[16] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1896 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [3] -> \regfile[16] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1897 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [4] -> \regfile[16] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1898 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [5] -> \regfile[16] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1899 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [6] -> \regfile[16] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1900 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [7] -> \regfile[16] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1901 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [8] -> \regfile[16] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1902 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [9] -> \regfile[16] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1903 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [10] -> \regfile[16] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1904 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [11] -> \regfile[16] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1905 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [12] -> \regfile[16] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1906 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [13] -> \regfile[16] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1907 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [14] -> \regfile[16] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1908 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [15] -> \regfile[16] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1909 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [16] -> \regfile[16] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1910 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [17] -> \regfile[16] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1911 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [18] -> \regfile[16] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1912 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [19] -> \regfile[16] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1913 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [20] -> \regfile[16] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1914 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [21] -> \regfile[16] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1915 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [22] -> \regfile[16] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1916 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [23] -> \regfile[16] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1917 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [24] -> \regfile[16] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1918 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [25] -> \regfile[16] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1919 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [26] -> \regfile[16] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1920 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [27] -> \regfile[16] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1921 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [28] -> \regfile[16] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1922 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [29] -> \regfile[16] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1923 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [30] -> \regfile[16] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1924 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1296 [31] -> \regfile[16] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1925 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [0] -> \regfile[20] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1926 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [1] -> \regfile[20] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1927 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [2] -> \regfile[20] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1928 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [3] -> \regfile[20] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1929 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [4] -> \regfile[20] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1930 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [5] -> \regfile[20] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1931 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [6] -> \regfile[20] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1932 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [7] -> \regfile[20] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1933 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [8] -> \regfile[20] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1934 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [9] -> \regfile[20] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1935 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [10] -> \regfile[20] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1936 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [11] -> \regfile[20] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1937 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [12] -> \regfile[20] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1938 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [13] -> \regfile[20] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1939 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [14] -> \regfile[20] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1940 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [15] -> \regfile[20] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1941 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [16] -> \regfile[20] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1942 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [17] -> \regfile[20] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1943 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [18] -> \regfile[20] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1944 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [19] -> \regfile[20] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1945 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [20] -> \regfile[20] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1946 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [21] -> \regfile[20] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1947 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [22] -> \regfile[20] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1948 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [23] -> \regfile[20] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1949 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [24] -> \regfile[20] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1950 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [25] -> \regfile[20] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1951 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [26] -> \regfile[20] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1952 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [27] -> \regfile[20] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1953 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [28] -> \regfile[20] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1954 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [29] -> \regfile[20] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1955 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [30] -> \regfile[20] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1956 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1322 [31] -> \regfile[20] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1959 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [0] -> \regfile[18] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1960 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [1] -> \regfile[18] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1961 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [2] -> \regfile[18] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1962 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [3] -> \regfile[18] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1963 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [4] -> \regfile[18] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1964 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [5] -> \regfile[18] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1965 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [6] -> \regfile[18] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1966 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [7] -> \regfile[18] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1967 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [8] -> \regfile[18] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1968 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [9] -> \regfile[18] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1969 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [10] -> \regfile[18] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1970 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [11] -> \regfile[18] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1971 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [12] -> \regfile[18] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1972 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [13] -> \regfile[18] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1973 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [14] -> \regfile[18] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1974 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [15] -> \regfile[18] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1975 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [16] -> \regfile[18] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1976 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [17] -> \regfile[18] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1977 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [18] -> \regfile[18] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1978 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [19] -> \regfile[18] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1979 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [20] -> \regfile[18] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1980 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [21] -> \regfile[18] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1981 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [22] -> \regfile[18] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1982 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [23] -> \regfile[18] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1983 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [24] -> \regfile[18] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1984 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [25] -> \regfile[18] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1985 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [26] -> \regfile[18] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1986 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [27] -> \regfile[18] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1987 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [28] -> \regfile[18] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1988 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [29] -> \regfile[18] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1989 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [30] -> \regfile[18] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1990 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1308 [31] -> \regfile[18] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2004 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [0] -> \regfile[7] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2005 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [1] -> \regfile[7] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2006 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [2] -> \regfile[7] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2007 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [3] -> \regfile[7] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2008 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [4] -> \regfile[7] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2009 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [5] -> \regfile[7] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2010 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [6] -> \regfile[7] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2011 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [7] -> \regfile[7] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2012 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [8] -> \regfile[7] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2013 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [9] -> \regfile[7] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2014 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [10] -> \regfile[7] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2015 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [11] -> \regfile[7] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2016 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [12] -> \regfile[7] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2017 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [13] -> \regfile[7] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2018 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [14] -> \regfile[7] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2019 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [15] -> \regfile[7] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2020 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [16] -> \regfile[7] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2021 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [17] -> \regfile[7] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2022 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [18] -> \regfile[7] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2023 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [19] -> \regfile[7] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2024 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [20] -> \regfile[7] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2025 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [21] -> \regfile[7] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2026 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [22] -> \regfile[7] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2027 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [23] -> \regfile[7] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2028 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [24] -> \regfile[7] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2029 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [25] -> \regfile[7] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2030 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [26] -> \regfile[7] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2031 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [27] -> \regfile[7] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2032 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [28] -> \regfile[7] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2033 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [29] -> \regfile[7] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2034 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [30] -> \regfile[7] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2035 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1228 [31] -> \regfile[7] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2081 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [0] -> \regfile[21] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2082 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [1] -> \regfile[21] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2083 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [2] -> \regfile[21] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2084 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [3] -> \regfile[21] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2085 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [4] -> \regfile[21] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2086 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [5] -> \regfile[21] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2087 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [6] -> \regfile[21] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2088 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [7] -> \regfile[21] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2089 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [8] -> \regfile[21] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2090 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [9] -> \regfile[21] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2091 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [10] -> \regfile[21] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2092 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [11] -> \regfile[21] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2093 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [12] -> \regfile[21] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2094 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [13] -> \regfile[21] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2095 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [14] -> \regfile[21] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2096 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [15] -> \regfile[21] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2097 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [16] -> \regfile[21] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2098 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [17] -> \regfile[21] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2099 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [18] -> \regfile[21] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2100 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [19] -> \regfile[21] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2101 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [20] -> \regfile[21] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2102 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [21] -> \regfile[21] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2103 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [22] -> \regfile[21] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2104 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [23] -> \regfile[21] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2105 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [24] -> \regfile[21] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2106 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [25] -> \regfile[21] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2107 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [26] -> \regfile[21] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2108 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [27] -> \regfile[21] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2109 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [28] -> \regfile[21] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2110 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [29] -> \regfile[21] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2111 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [30] -> \regfile[21] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2112 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1328 [31] -> \regfile[21] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2549 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [0] -> \regfile[19] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2550 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [1] -> \regfile[19] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2551 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [2] -> \regfile[19] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2552 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [3] -> \regfile[19] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2553 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [4] -> \regfile[19] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2554 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [5] -> \regfile[19] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2555 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [6] -> \regfile[19] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2556 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [7] -> \regfile[19] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2557 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [8] -> \regfile[19] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2558 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [9] -> \regfile[19] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2559 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [10] -> \regfile[19] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2560 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [11] -> \regfile[19] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2561 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [12] -> \regfile[19] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2562 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [13] -> \regfile[19] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2563 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [14] -> \regfile[19] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2564 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [15] -> \regfile[19] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2565 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [16] -> \regfile[19] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2566 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [17] -> \regfile[19] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2567 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [18] -> \regfile[19] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2568 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [19] -> \regfile[19] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2569 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [20] -> \regfile[19] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2570 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [21] -> \regfile[19] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2571 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [22] -> \regfile[19] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2572 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [23] -> \regfile[19] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2573 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [24] -> \regfile[19] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2574 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [25] -> \regfile[19] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2575 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [26] -> \regfile[19] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2576 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [27] -> \regfile[19] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2577 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [28] -> \regfile[19] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2578 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [29] -> \regfile[19] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2579 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [30] -> \regfile[19] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2580 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1314 [31] -> \regfile[19] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3161 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [0] -> \regfile[12] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3162 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [1] -> \regfile[12] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3163 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [2] -> \regfile[12] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3164 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [3] -> \regfile[12] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3165 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [4] -> \regfile[12] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3166 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [5] -> \regfile[12] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3167 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [6] -> \regfile[12] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3168 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [7] -> \regfile[12] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3169 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [8] -> \regfile[12] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3170 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [9] -> \regfile[12] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3171 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [10] -> \regfile[12] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3172 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [11] -> \regfile[12] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3173 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [12] -> \regfile[12] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3174 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [13] -> \regfile[12] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3175 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [14] -> \regfile[12] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3176 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [15] -> \regfile[12] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3177 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [16] -> \regfile[12] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3178 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [17] -> \regfile[12] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3179 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [18] -> \regfile[12] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3180 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [19] -> \regfile[12] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3181 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [20] -> \regfile[12] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3182 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [21] -> \regfile[12] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3183 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [22] -> \regfile[12] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3184 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [23] -> \regfile[12] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3185 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [24] -> \regfile[12] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3186 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [25] -> \regfile[12] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3187 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [26] -> \regfile[12] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3188 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [27] -> \regfile[12] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3189 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [28] -> \regfile[12] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3190 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [29] -> \regfile[12] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3191 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [30] -> \regfile[12] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3192 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1266 [31] -> \regfile[12] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3289 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [0] -> \regfile[25] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3290 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [1] -> \regfile[25] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3291 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [2] -> \regfile[25] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3292 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [3] -> \regfile[25] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3293 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [4] -> \regfile[25] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3294 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [5] -> \regfile[25] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3295 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [6] -> \regfile[25] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3296 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [7] -> \regfile[25] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3297 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [8] -> \regfile[25] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3298 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [9] -> \regfile[25] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3299 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [10] -> \regfile[25] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3300 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [11] -> \regfile[25] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3301 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [12] -> \regfile[25] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3302 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [13] -> \regfile[25] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3303 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [14] -> \regfile[25] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3304 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [15] -> \regfile[25] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3305 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [16] -> \regfile[25] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3306 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [17] -> \regfile[25] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3307 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [18] -> \regfile[25] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3308 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [19] -> \regfile[25] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3309 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [20] -> \regfile[25] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3310 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [21] -> \regfile[25] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3311 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [22] -> \regfile[25] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3312 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [23] -> \regfile[25] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3313 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [24] -> \regfile[25] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3314 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [25] -> \regfile[25] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3315 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [26] -> \regfile[25] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3316 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [27] -> \regfile[25] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3317 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [28] -> \regfile[25] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3318 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [29] -> \regfile[25] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3319 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [30] -> \regfile[25] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3320 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1356 [31] -> \regfile[25] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3322 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [0] -> \regfile[24] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3323 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [1] -> \regfile[24] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3324 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [2] -> \regfile[24] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3325 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [3] -> \regfile[24] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3326 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [4] -> \regfile[24] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3327 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [5] -> \regfile[24] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3328 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [6] -> \regfile[24] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3329 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [7] -> \regfile[24] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3330 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [8] -> \regfile[24] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3331 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [9] -> \regfile[24] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3332 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [10] -> \regfile[24] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3333 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [11] -> \regfile[24] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3334 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [12] -> \regfile[24] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3335 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [13] -> \regfile[24] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3336 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [14] -> \regfile[24] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3337 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [15] -> \regfile[24] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3338 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [16] -> \regfile[24] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3339 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [17] -> \regfile[24] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3340 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [18] -> \regfile[24] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3341 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [19] -> \regfile[24] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3342 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [20] -> \regfile[24] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3343 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [21] -> \regfile[24] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3344 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [22] -> \regfile[24] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3345 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [23] -> \regfile[24] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3346 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [24] -> \regfile[24] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3347 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [25] -> \regfile[24] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3348 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [26] -> \regfile[24] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3349 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [27] -> \regfile[24] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3350 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [28] -> \regfile[24] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3351 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [29] -> \regfile[24] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3352 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [30] -> \regfile[24] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3353 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1350 [31] -> \regfile[24] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3357 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [0] -> \regfile[15] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3358 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [1] -> \regfile[15] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3359 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [2] -> \regfile[15] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3360 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [3] -> \regfile[15] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3361 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [4] -> \regfile[15] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3362 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [5] -> \regfile[15] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3363 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [6] -> \regfile[15] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3364 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [7] -> \regfile[15] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3365 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [8] -> \regfile[15] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3366 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [9] -> \regfile[15] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3367 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [10] -> \regfile[15] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3368 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [11] -> \regfile[15] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3369 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [12] -> \regfile[15] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3370 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [13] -> \regfile[15] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3371 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [14] -> \regfile[15] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3372 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [15] -> \regfile[15] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3373 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [16] -> \regfile[15] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3374 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [17] -> \regfile[15] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3375 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [18] -> \regfile[15] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3376 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [19] -> \regfile[15] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3377 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [20] -> \regfile[15] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3378 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [21] -> \regfile[15] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3379 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [22] -> \regfile[15] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3380 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [23] -> \regfile[15] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3381 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [24] -> \regfile[15] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3382 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [25] -> \regfile[15] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3383 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [26] -> \regfile[15] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3384 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [27] -> \regfile[15] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3385 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [28] -> \regfile[15] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3386 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [29] -> \regfile[15] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3387 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [30] -> \regfile[15] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3388 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1284 [31] -> \regfile[15] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4078 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [0] -> \regfile[1] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4079 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [1] -> \regfile[1] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4080 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [2] -> \regfile[1] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4081 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [3] -> \regfile[1] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4082 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [4] -> \regfile[1] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4083 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [5] -> \regfile[1] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4084 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [6] -> \regfile[1] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4085 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [7] -> \regfile[1] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4086 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [8] -> \regfile[1] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4087 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [9] -> \regfile[1] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4088 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [10] -> \regfile[1] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4089 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [11] -> \regfile[1] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4090 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [12] -> \regfile[1] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4091 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [13] -> \regfile[1] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4092 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [14] -> \regfile[1] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4093 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [15] -> \regfile[1] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4094 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [16] -> \regfile[1] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4095 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [17] -> \regfile[1] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4096 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [18] -> \regfile[1] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4097 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [19] -> \regfile[1] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4098 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [20] -> \regfile[1] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4099 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [21] -> \regfile[1] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4100 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [22] -> \regfile[1] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4101 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [23] -> \regfile[1] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4102 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [24] -> \regfile[1] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4103 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [25] -> \regfile[1] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4104 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [26] -> \regfile[1] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4105 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [27] -> \regfile[1] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4106 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [28] -> \regfile[1] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4107 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [29] -> \regfile[1] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4108 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [30] -> \regfile[1] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4109 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1182 [31] -> \regfile[1] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4110 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [0] -> \regfile[0] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4111 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [1] -> \regfile[0] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4112 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [2] -> \regfile[0] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4113 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [3] -> \regfile[0] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4114 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [4] -> \regfile[0] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4115 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [5] -> \regfile[0] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4116 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [6] -> \regfile[0] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4117 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [7] -> \regfile[0] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4118 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [8] -> \regfile[0] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4119 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [9] -> \regfile[0] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4120 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [10] -> \regfile[0] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4121 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [11] -> \regfile[0] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4122 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [12] -> \regfile[0] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4123 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [13] -> \regfile[0] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4124 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [14] -> \regfile[0] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4125 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [15] -> \regfile[0] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4126 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [16] -> \regfile[0] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4127 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [17] -> \regfile[0] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4128 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [18] -> \regfile[0] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4129 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [19] -> \regfile[0] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4130 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [20] -> \regfile[0] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4131 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [21] -> \regfile[0] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4132 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [22] -> \regfile[0] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4133 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [23] -> \regfile[0] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4134 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [24] -> \regfile[0] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4135 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [25] -> \regfile[0] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4136 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [26] -> \regfile[0] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4137 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [27] -> \regfile[0] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4138 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [28] -> \regfile[0] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4139 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [29] -> \regfile[0] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4140 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [30] -> \regfile[0] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4141 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1172 [31] -> \regfile[0] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4143 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [0] -> \regfile[4] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4144 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [1] -> \regfile[4] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4145 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [2] -> \regfile[4] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4146 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [3] -> \regfile[4] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4147 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [4] -> \regfile[4] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4148 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [5] -> \regfile[4] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4149 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [6] -> \regfile[4] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4150 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [7] -> \regfile[4] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4151 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [8] -> \regfile[4] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4152 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [9] -> \regfile[4] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4153 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [10] -> \regfile[4] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4154 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [11] -> \regfile[4] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4155 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [12] -> \regfile[4] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4156 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [13] -> \regfile[4] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4157 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [14] -> \regfile[4] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4158 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [15] -> \regfile[4] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4159 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [16] -> \regfile[4] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4160 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [17] -> \regfile[4] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4161 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [18] -> \regfile[4] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4162 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [19] -> \regfile[4] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4163 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [20] -> \regfile[4] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4164 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [21] -> \regfile[4] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4165 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [22] -> \regfile[4] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4166 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [23] -> \regfile[4] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4167 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [24] -> \regfile[4] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4168 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [25] -> \regfile[4] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4169 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [26] -> \regfile[4] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4170 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [27] -> \regfile[4] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4171 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [28] -> \regfile[4] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4172 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [29] -> \regfile[4] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4173 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [30] -> \regfile[4] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4174 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1210 [31] -> \regfile[4] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4281 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [0] -> \regfile[23] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4282 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [1] -> \regfile[23] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4283 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [2] -> \regfile[23] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4284 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [3] -> \regfile[23] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4285 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [4] -> \regfile[23] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4286 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [5] -> \regfile[23] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4287 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [6] -> \regfile[23] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4288 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [7] -> \regfile[23] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4289 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [8] -> \regfile[23] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4290 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [9] -> \regfile[23] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4291 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [10] -> \regfile[23] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4292 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [11] -> \regfile[23] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4293 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [12] -> \regfile[23] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4294 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [13] -> \regfile[23] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4295 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [14] -> \regfile[23] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4296 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [15] -> \regfile[23] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4297 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [16] -> \regfile[23] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4298 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [17] -> \regfile[23] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4299 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [18] -> \regfile[23] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4300 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [19] -> \regfile[23] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4301 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [20] -> \regfile[23] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4302 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [21] -> \regfile[23] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4303 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [22] -> \regfile[23] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4304 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [23] -> \regfile[23] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4305 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [24] -> \regfile[23] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4306 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [25] -> \regfile[23] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4307 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [26] -> \regfile[23] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4308 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [27] -> \regfile[23] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4309 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [28] -> \regfile[23] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4310 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [29] -> \regfile[23] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4311 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [30] -> \regfile[23] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4312 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1340 [31] -> \regfile[23] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4594 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [0] -> \regfile[29] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4595 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [1] -> \regfile[29] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4596 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [2] -> \regfile[29] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4597 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [3] -> \regfile[29] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4598 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [4] -> \regfile[29] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4599 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [5] -> \regfile[29] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4600 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [6] -> \regfile[29] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4601 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [7] -> \regfile[29] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4602 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [8] -> \regfile[29] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4603 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [9] -> \regfile[29] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4604 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [10] -> \regfile[29] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4605 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [11] -> \regfile[29] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4606 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [12] -> \regfile[29] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4607 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [13] -> \regfile[29] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4608 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [14] -> \regfile[29] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4609 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [15] -> \regfile[29] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4610 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [16] -> \regfile[29] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4611 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [17] -> \regfile[29] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4612 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [18] -> \regfile[29] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4613 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [19] -> \regfile[29] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4614 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [20] -> \regfile[29] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4615 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [21] -> \regfile[29] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4616 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [22] -> \regfile[29] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4617 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [23] -> \regfile[29] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4618 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [24] -> \regfile[29] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4619 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [25] -> \regfile[29] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4620 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [26] -> \regfile[29] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4621 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [27] -> \regfile[29] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4622 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [28] -> \regfile[29] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4623 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [29] -> \regfile[29] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4624 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [30] -> \regfile[29] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4625 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1382 [31] -> \regfile[29] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5191 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [0] -> \regfile[30] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5192 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [1] -> \regfile[30] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5193 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [2] -> \regfile[30] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5194 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [3] -> \regfile[30] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5195 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [4] -> \regfile[30] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5196 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [5] -> \regfile[30] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5197 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [6] -> \regfile[30] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5198 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [7] -> \regfile[30] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5199 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [8] -> \regfile[30] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5200 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [9] -> \regfile[30] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5201 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [10] -> \regfile[30] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5202 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [11] -> \regfile[30] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5203 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [12] -> \regfile[30] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5204 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [13] -> \regfile[30] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5205 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [14] -> \regfile[30] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5206 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [15] -> \regfile[30] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5207 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [16] -> \regfile[30] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5208 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [17] -> \regfile[30] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5209 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [18] -> \regfile[30] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5210 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [19] -> \regfile[30] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5211 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [20] -> \regfile[30] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5212 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [21] -> \regfile[30] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5213 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [22] -> \regfile[30] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5214 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [23] -> \regfile[30] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5215 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [24] -> \regfile[30] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5216 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [25] -> \regfile[30] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5217 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [26] -> \regfile[30] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5218 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [27] -> \regfile[30] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5219 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [28] -> \regfile[30] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5220 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [29] -> \regfile[30] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5221 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [30] -> \regfile[30] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5222 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1388 [31] -> \regfile[30] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5255 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [0] -> \regfile[13] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5256 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [1] -> \regfile[13] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5257 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [2] -> \regfile[13] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5258 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [3] -> \regfile[13] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5259 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [4] -> \regfile[13] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5260 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [5] -> \regfile[13] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5261 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [6] -> \regfile[13] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5262 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [7] -> \regfile[13] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5263 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [8] -> \regfile[13] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5264 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [9] -> \regfile[13] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5265 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [10] -> \regfile[13] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5266 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [11] -> \regfile[13] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5267 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [12] -> \regfile[13] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5268 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [13] -> \regfile[13] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5269 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [14] -> \regfile[13] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5270 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [15] -> \regfile[13] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5271 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [16] -> \regfile[13] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5272 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [17] -> \regfile[13] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5273 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [18] -> \regfile[13] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5274 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [19] -> \regfile[13] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5275 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [20] -> \regfile[13] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5276 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [21] -> \regfile[13] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5277 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [22] -> \regfile[13] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5278 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [23] -> \regfile[13] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5279 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [24] -> \regfile[13] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5280 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [25] -> \regfile[13] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5281 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [26] -> \regfile[13] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5282 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [27] -> \regfile[13] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5283 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [28] -> \regfile[13] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5284 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [29] -> \regfile[13] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5285 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [30] -> \regfile[13] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5286 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1272 [31] -> \regfile[13] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5287 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [0] -> \regfile[31] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5288 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [1] -> \regfile[31] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5289 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [2] -> \regfile[31] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5290 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [3] -> \regfile[31] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5291 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [4] -> \regfile[31] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5292 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [5] -> \regfile[31] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5293 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [6] -> \regfile[31] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5294 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [7] -> \regfile[31] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5295 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [8] -> \regfile[31] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5296 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [9] -> \regfile[31] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5297 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [10] -> \regfile[31] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5298 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [11] -> \regfile[31] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5299 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [12] -> \regfile[31] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5300 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [13] -> \regfile[31] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5301 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [14] -> \regfile[31] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5302 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [15] -> \regfile[31] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5303 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [16] -> \regfile[31] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5304 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [17] -> \regfile[31] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5305 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [18] -> \regfile[31] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5306 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [19] -> \regfile[31] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5307 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [20] -> \regfile[31] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5308 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [21] -> \regfile[31] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5309 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [22] -> \regfile[31] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5310 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [23] -> \regfile[31] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5311 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [24] -> \regfile[31] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5312 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [25] -> \regfile[31] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5313 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [26] -> \regfile[31] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5314 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [27] -> \regfile[31] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5315 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [28] -> \regfile[31] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5316 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [29] -> \regfile[31] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5317 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [30] -> \regfile[31] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5318 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1394 [31] -> \regfile[31] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5320 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [0] -> \regfile[22] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5321 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [1] -> \regfile[22] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5322 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [2] -> \regfile[22] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5323 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [3] -> \regfile[22] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5324 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [4] -> \regfile[22] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5325 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [5] -> \regfile[22] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5326 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [6] -> \regfile[22] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5327 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [7] -> \regfile[22] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5328 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [8] -> \regfile[22] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5329 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [9] -> \regfile[22] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5330 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [10] -> \regfile[22] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5331 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [11] -> \regfile[22] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5332 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [12] -> \regfile[22] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5333 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [13] -> \regfile[22] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5334 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [14] -> \regfile[22] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5335 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [15] -> \regfile[22] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5336 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [16] -> \regfile[22] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5337 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [17] -> \regfile[22] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5338 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [18] -> \regfile[22] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5339 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [19] -> \regfile[22] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5340 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [20] -> \regfile[22] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5341 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [21] -> \regfile[22] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5342 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [22] -> \regfile[22] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5343 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [23] -> \regfile[22] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5344 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [24] -> \regfile[22] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5345 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [25] -> \regfile[22] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5346 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [26] -> \regfile[22] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5347 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [27] -> \regfile[22] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5348 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [28] -> \regfile[22] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5349 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [29] -> \regfile[22] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5350 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [30] -> \regfile[22] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5351 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1334 [31] -> \regfile[22] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5602 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [0] -> \regfile[9] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5603 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [1] -> \regfile[9] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5604 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [2] -> \regfile[9] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5605 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [3] -> \regfile[9] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5606 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [4] -> \regfile[9] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5607 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [5] -> \regfile[9] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5608 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [6] -> \regfile[9] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5609 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [7] -> \regfile[9] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5610 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [8] -> \regfile[9] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5611 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [9] -> \regfile[9] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5612 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [10] -> \regfile[9] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5613 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [11] -> \regfile[9] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5614 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [12] -> \regfile[9] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5615 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [13] -> \regfile[9] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5616 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [14] -> \regfile[9] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5617 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [15] -> \regfile[9] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5618 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [16] -> \regfile[9] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5619 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [17] -> \regfile[9] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5620 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [18] -> \regfile[9] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5621 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [19] -> \regfile[9] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5622 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [20] -> \regfile[9] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5623 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [21] -> \regfile[9] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5624 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [22] -> \regfile[9] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5625 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [23] -> \regfile[9] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5626 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [24] -> \regfile[9] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5627 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [25] -> \regfile[9] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5628 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [26] -> \regfile[9] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5629 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [27] -> \regfile[9] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5630 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [28] -> \regfile[9] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5631 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [29] -> \regfile[9] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5632 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [30] -> \regfile[9] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5633 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1246 [31] -> \regfile[9] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5857 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [0] -> \regfile[27] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5858 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [1] -> \regfile[27] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5859 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [2] -> \regfile[27] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5860 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [3] -> \regfile[27] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5861 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [4] -> \regfile[27] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5862 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [5] -> \regfile[27] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5863 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [6] -> \regfile[27] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5864 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [7] -> \regfile[27] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5865 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [8] -> \regfile[27] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5866 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [9] -> \regfile[27] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5867 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [10] -> \regfile[27] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5868 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [11] -> \regfile[27] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5869 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [12] -> \regfile[27] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5870 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [13] -> \regfile[27] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5871 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [14] -> \regfile[27] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5872 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [15] -> \regfile[27] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5873 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [16] -> \regfile[27] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5874 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [17] -> \regfile[27] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5875 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [18] -> \regfile[27] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5876 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [19] -> \regfile[27] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5877 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [20] -> \regfile[27] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5878 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [21] -> \regfile[27] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5879 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [22] -> \regfile[27] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5880 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [23] -> \regfile[27] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5881 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [24] -> \regfile[27] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5882 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [25] -> \regfile[27] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5883 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [26] -> \regfile[27] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5884 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [27] -> \regfile[27] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5885 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [28] -> \regfile[27] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5886 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [29] -> \regfile[27] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5887 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [30] -> \regfile[27] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5888 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1368 [31] -> \regfile[27] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5922 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [0] -> \regfile[28] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5923 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [1] -> \regfile[28] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5924 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [2] -> \regfile[28] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5925 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [3] -> \regfile[28] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5926 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [4] -> \regfile[28] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5927 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [5] -> \regfile[28] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5928 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [6] -> \regfile[28] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5929 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [7] -> \regfile[28] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5930 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [8] -> \regfile[28] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5931 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [9] -> \regfile[28] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5932 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [10] -> \regfile[28] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5933 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [11] -> \regfile[28] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5934 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [12] -> \regfile[28] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5935 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [13] -> \regfile[28] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5936 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [14] -> \regfile[28] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5937 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [15] -> \regfile[28] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5938 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [16] -> \regfile[28] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5939 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [17] -> \regfile[28] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5940 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [18] -> \regfile[28] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5941 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [19] -> \regfile[28] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5942 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [20] -> \regfile[28] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5943 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [21] -> \regfile[28] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5944 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [22] -> \regfile[28] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5945 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [23] -> \regfile[28] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5946 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [24] -> \regfile[28] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5947 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [25] -> \regfile[28] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5948 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [26] -> \regfile[28] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5949 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [27] -> \regfile[28] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5950 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [28] -> \regfile[28] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5951 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [29] -> \regfile[28] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5952 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [30] -> \regfile[28] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5953 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1376 [31] -> \regfile[28] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6115 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [0] -> \regfile[26] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6116 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [1] -> \regfile[26] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6117 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [2] -> \regfile[26] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6118 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [3] -> \regfile[26] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6119 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [4] -> \regfile[26] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6120 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [5] -> \regfile[26] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6121 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [6] -> \regfile[26] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6122 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [7] -> \regfile[26] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6123 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [8] -> \regfile[26] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6124 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [9] -> \regfile[26] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6125 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [10] -> \regfile[26] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6126 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [11] -> \regfile[26] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6127 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [12] -> \regfile[26] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6128 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [13] -> \regfile[26] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6129 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [14] -> \regfile[26] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6130 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [15] -> \regfile[26] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6131 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [16] -> \regfile[26] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6132 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [17] -> \regfile[26] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6133 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [18] -> \regfile[26] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6134 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [19] -> \regfile[26] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6135 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [20] -> \regfile[26] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6136 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [21] -> \regfile[26] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6137 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [22] -> \regfile[26] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6138 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [23] -> \regfile[26] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6139 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [24] -> \regfile[26] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6140 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [25] -> \regfile[26] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6141 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [26] -> \regfile[26] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6142 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [27] -> \regfile[26] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6143 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [28] -> \regfile[26] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6144 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [29] -> \regfile[26] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6145 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [30] -> \regfile[26] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6146 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1362 [31] -> \regfile[26] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6778 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [0] -> \regfile[5] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6779 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [1] -> \regfile[5] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6780 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [2] -> \regfile[5] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6781 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [3] -> \regfile[5] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6782 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [4] -> \regfile[5] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6783 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [5] -> \regfile[5] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6784 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [6] -> \regfile[5] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6785 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [7] -> \regfile[5] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6786 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [8] -> \regfile[5] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6787 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [9] -> \regfile[5] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6788 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [10] -> \regfile[5] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6789 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [11] -> \regfile[5] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6790 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [12] -> \regfile[5] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6791 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [13] -> \regfile[5] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6792 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [14] -> \regfile[5] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6793 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [15] -> \regfile[5] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6794 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [16] -> \regfile[5] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6795 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [17] -> \regfile[5] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6796 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [18] -> \regfile[5] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6797 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [19] -> \regfile[5] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6798 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [20] -> \regfile[5] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6799 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [21] -> \regfile[5] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6800 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [22] -> \regfile[5] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6801 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [23] -> \regfile[5] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6802 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [24] -> \regfile[5] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6803 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [25] -> \regfile[5] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6804 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [26] -> \regfile[5] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6805 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [27] -> \regfile[5] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6806 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [28] -> \regfile[5] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6807 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [29] -> \regfile[5] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6808 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [30] -> \regfile[5] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6809 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1216 [31] -> \regfile[5] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8165 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [0] -> \regfile[8] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8166 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [1] -> \regfile[8] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8167 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [2] -> \regfile[8] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8168 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [3] -> \regfile[8] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8169 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [4] -> \regfile[8] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8170 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [5] -> \regfile[8] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8171 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [6] -> \regfile[8] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8172 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [7] -> \regfile[8] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8173 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [8] -> \regfile[8] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8174 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [9] -> \regfile[8] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8175 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [10] -> \regfile[8] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8176 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [11] -> \regfile[8] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8177 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [12] -> \regfile[8] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8178 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [13] -> \regfile[8] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8179 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [14] -> \regfile[8] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8180 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [15] -> \regfile[8] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8181 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [16] -> \regfile[8] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8182 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [17] -> \regfile[8] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8183 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [18] -> \regfile[8] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8184 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [19] -> \regfile[8] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8185 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [20] -> \regfile[8] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8186 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [21] -> \regfile[8] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8187 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [22] -> \regfile[8] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8188 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [23] -> \regfile[8] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8189 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [24] -> \regfile[8] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8190 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [25] -> \regfile[8] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8191 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [26] -> \regfile[8] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8192 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [27] -> \regfile[8] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8193 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [28] -> \regfile[8] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8194 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [29] -> \regfile[8] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8195 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [30] -> \regfile[8] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8196 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1240 [31] -> \regfile[8] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8231 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [0] -> \regfile[10] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8232 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [1] -> \regfile[10] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8233 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [2] -> \regfile[10] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8234 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [3] -> \regfile[10] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8235 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [4] -> \regfile[10] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8236 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [5] -> \regfile[10] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8237 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [6] -> \regfile[10] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8238 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [7] -> \regfile[10] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8239 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [8] -> \regfile[10] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8240 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [9] -> \regfile[10] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8241 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [10] -> \regfile[10] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8242 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [11] -> \regfile[10] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8243 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [12] -> \regfile[10] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8244 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [13] -> \regfile[10] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8245 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [14] -> \regfile[10] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8246 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [15] -> \regfile[10] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8247 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [16] -> \regfile[10] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8248 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [17] -> \regfile[10] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8249 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [18] -> \regfile[10] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8250 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [19] -> \regfile[10] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8251 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [20] -> \regfile[10] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8252 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [21] -> \regfile[10] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8253 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [22] -> \regfile[10] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8254 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [23] -> \regfile[10] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8255 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [24] -> \regfile[10] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8256 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [25] -> \regfile[10] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8257 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [26] -> \regfile[10] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8258 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [27] -> \regfile[10] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8259 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [28] -> \regfile[10] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8260 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [29] -> \regfile[10] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8261 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [30] -> \regfile[10] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8262 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1252 [31] -> \regfile[10] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8778 to $_DFFE_PP_ for $0\pc[31:0] [0] -> \pc [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8779 to $_DFFE_PP_ for $0\pc[31:0] [1] -> \pc [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8780 to $_DFFE_PP_ for $0\pc[31:0] [2] -> \pc [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8781 to $_DFFE_PP_ for $0\pc[31:0] [3] -> \pc [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8782 to $_DFFE_PP_ for $0\pc[31:0] [4] -> \pc [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8783 to $_DFFE_PP_ for $0\pc[31:0] [5] -> \pc [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8784 to $_DFFE_PP_ for $0\pc[31:0] [6] -> \pc [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8785 to $_DFFE_PP_ for $0\pc[31:0] [7] -> \pc [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8786 to $_DFFE_PP_ for $0\pc[31:0] [8] -> \pc [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8787 to $_DFFE_PP_ for $0\pc[31:0] [9] -> \pc [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8788 to $_DFFE_PP_ for $0\pc[31:0] [10] -> \pc [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8789 to $_DFFE_PP_ for $0\pc[31:0] [11] -> \pc [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8790 to $_DFFE_PP_ for $0\pc[31:0] [12] -> \pc [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8791 to $_DFFE_PP_ for $0\pc[31:0] [13] -> \pc [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8792 to $_DFFE_PP_ for $0\pc[31:0] [14] -> \pc [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8793 to $_DFFE_PP_ for $0\pc[31:0] [15] -> \pc [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8794 to $_DFFE_PP_ for $0\pc[31:0] [16] -> \pc [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8795 to $_DFFE_PP_ for $0\pc[31:0] [17] -> \pc [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8796 to $_DFFE_PP_ for $0\pc[31:0] [18] -> \pc [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8797 to $_DFFE_PP_ for $0\pc[31:0] [19] -> \pc [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8798 to $_DFFE_PP_ for $0\pc[31:0] [20] -> \pc [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8799 to $_DFFE_PP_ for $0\pc[31:0] [21] -> \pc [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8800 to $_DFFE_PP_ for $0\pc[31:0] [22] -> \pc [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8801 to $_DFFE_PP_ for $0\pc[31:0] [23] -> \pc [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8802 to $_DFFE_PP_ for $0\pc[31:0] [24] -> \pc [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8803 to $_DFFE_PP_ for $0\pc[31:0] [25] -> \pc [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8804 to $_DFFE_PP_ for $0\pc[31:0] [26] -> \pc [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8805 to $_DFFE_PP_ for $0\pc[31:0] [27] -> \pc [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8806 to $_DFFE_PP_ for $0\pc[31:0] [28] -> \pc [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8807 to $_DFFE_PP_ for $0\pc[31:0] [29] -> \pc [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8808 to $_DFFE_PP_ for $0\pc[31:0] [30] -> \pc [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8809 to $_DFFE_PP_ for $0\pc[31:0] [31] -> \pc [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9179 to $_DFFE_PP_ for $0\wb_wr_q[0:0] -> \wb_wr_q.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9180 to $_DFFE_PP_ for $0\wb_data_q[31:0] [0] -> \wb_data_q [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9181 to $_DFFE_PP_ for $0\wb_data_q[31:0] [1] -> \wb_data_q [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9182 to $_DFFE_PP_ for $0\wb_data_q[31:0] [2] -> \wb_data_q [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9183 to $_DFFE_PP_ for $0\wb_data_q[31:0] [3] -> \wb_data_q [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9184 to $_DFFE_PP_ for $0\wb_data_q[31:0] [4] -> \wb_data_q [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9185 to $_DFFE_PP_ for $0\wb_data_q[31:0] [5] -> \wb_data_q [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9186 to $_DFFE_PP_ for $0\wb_data_q[31:0] [6] -> \wb_data_q [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9187 to $_DFFE_PP_ for $0\wb_data_q[31:0] [7] -> \wb_data_q [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9188 to $_DFFE_PP_ for $0\wb_data_q[31:0] [8] -> \wb_data_q [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9189 to $_DFFE_PP_ for $0\wb_data_q[31:0] [9] -> \wb_data_q [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9190 to $_DFFE_PP_ for $0\wb_data_q[31:0] [10] -> \wb_data_q [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9191 to $_DFFE_PP_ for $0\wb_data_q[31:0] [11] -> \wb_data_q [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9192 to $_DFFE_PP_ for $0\wb_data_q[31:0] [12] -> \wb_data_q [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9193 to $_DFFE_PP_ for $0\wb_data_q[31:0] [13] -> \wb_data_q [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9194 to $_DFFE_PP_ for $0\wb_data_q[31:0] [14] -> \wb_data_q [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9195 to $_DFFE_PP_ for $0\wb_data_q[31:0] [15] -> \wb_data_q [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9196 to $_DFFE_PP_ for $0\wb_data_q[31:0] [16] -> \wb_data_q [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9197 to $_DFFE_PP_ for $0\wb_data_q[31:0] [17] -> \wb_data_q [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9198 to $_DFFE_PP_ for $0\wb_data_q[31:0] [18] -> \wb_data_q [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9199 to $_DFFE_PP_ for $0\wb_data_q[31:0] [19] -> \wb_data_q [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9200 to $_DFFE_PP_ for $0\wb_data_q[31:0] [20] -> \wb_data_q [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9201 to $_DFFE_PP_ for $0\wb_data_q[31:0] [21] -> \wb_data_q [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9202 to $_DFFE_PP_ for $0\wb_data_q[31:0] [22] -> \wb_data_q [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9203 to $_DFFE_PP_ for $0\wb_data_q[31:0] [23] -> \wb_data_q [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9204 to $_DFFE_PP_ for $0\wb_data_q[31:0] [24] -> \wb_data_q [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9205 to $_DFFE_PP_ for $0\wb_data_q[31:0] [25] -> \wb_data_q [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9206 to $_DFFE_PP_ for $0\wb_data_q[31:0] [26] -> \wb_data_q [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9207 to $_DFFE_PP_ for $0\wb_data_q[31:0] [27] -> \wb_data_q [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9208 to $_DFFE_PP_ for $0\wb_data_q[31:0] [28] -> \wb_data_q [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9209 to $_DFFE_PP_ for $0\wb_data_q[31:0] [29] -> \wb_data_q [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9210 to $_DFFE_PP_ for $0\wb_data_q[31:0] [30] -> \wb_data_q [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9211 to $_DFFE_PP_ for $0\wb_data_q[31:0] [31] -> \wb_data_q [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9212 to $_DFFE_PP_ for $0\wb_rd_q[4:0] [0] -> \wb_rd_q [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9213 to $_DFFE_PP_ for $0\wb_rd_q[4:0] [1] -> \wb_rd_q [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9214 to $_DFFE_PP_ for $0\wb_rd_q[4:0] [2] -> \wb_rd_q [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9215 to $_DFFE_PP_ for $0\wb_rd_q[4:0] [3] -> \wb_rd_q [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9216 to $_DFFE_PP_ for $0\wb_rd_q[4:0] [4] -> \wb_rd_q [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9217 to $_DFFE_PP_ for $0\trapped[0:0] -> \trapped.

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~1139 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~2266 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in nerv.

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in nerv.
  Merging $auto$simplemap.cc:277:simplemap_mux$4530 (A=\npc [0], B=1'0, S=$logic_or$nerv2.sv:328$72_Y) into $auto$simplemap.cc:420:simplemap_dff$8778 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4531 (A=\npc [1], B=1'0, S=$logic_or$nerv2.sv:328$72_Y) into $auto$simplemap.cc:420:simplemap_dff$8779 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13234 (A=1'0, B=$procmux$612.Y_B [1], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9181 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4460 (A=\next_wr, B=1'0, S=$logic_or$nerv2.sv:328$72_Y) into $auto$simplemap.cc:420:simplemap_dff$9179 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13237 (A=1'0, B=$procmux$612.Y_B [4], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9184 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13235 (A=1'0, B=$procmux$612.Y_B [2], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9182 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13236 (A=1'0, B=$procmux$612.Y_B [3], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9183 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13238 (A=1'0, B=$procmux$612.Y_B [5], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9185 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13239 (A=1'0, B=$procmux$612.Y_B [6], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9186 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13240 (A=1'0, B=$procmux$612.Y_B [7], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9187 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13241 (A=1'0, B=$procmux$612.Y_B [8], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9188 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13242 (A=1'0, B=$procmux$612.Y_B [9], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9189 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13243 (A=1'0, B=$procmux$612.Y_B [10], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9190 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13244 (A=1'0, B=$procmux$612.Y_B [11], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9191 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13245 (A=1'0, B=$procmux$612.Y_B [12], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9192 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13246 (A=1'0, B=$procmux$612.Y_B [13], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9193 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13247 (A=1'0, B=$procmux$612.Y_B [14], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9194 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13248 (A=1'0, B=$procmux$612.Y_B [15], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9195 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13249 (A=1'0, B=$procmux$612.Y_B [16], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9196 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13250 (A=1'0, B=$procmux$612.Y_B [17], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9197 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13251 (A=1'0, B=$procmux$612.Y_B [18], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9198 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13252 (A=1'0, B=$procmux$612.Y_B [19], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9199 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13253 (A=1'0, B=$procmux$612.Y_B [20], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9200 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13254 (A=1'0, B=$procmux$612.Y_B [21], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9201 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13255 (A=1'0, B=$procmux$612.Y_B [22], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9202 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13256 (A=1'0, B=$procmux$612.Y_B [23], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9203 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13257 (A=1'0, B=$procmux$612.Y_B [24], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9204 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13258 (A=1'0, B=$procmux$612.Y_B [25], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9205 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13259 (A=1'0, B=$procmux$612.Y_B [26], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9206 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13260 (A=1'0, B=$procmux$612.Y_B [27], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9207 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13261 (A=1'0, B=$procmux$612.Y_B [28], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9208 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13262 (A=1'0, B=$procmux$612.Y_B [29], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9209 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13263 (A=1'0, B=$procmux$612.Y_B [30], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9210 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13264 (A=1'0, B=$procmux$612.Y_B [31], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9211 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$13233 (A=1'0, B=$procmux$612.Y_B [0], S=$techmap$procmux$612.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$7650_Y) into $auto$simplemap.cc:420:simplemap_dff$9180 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$9178 (A=\mem_rd_enable, B=1'0, S=\reset) into $auto$simplemap.cc:420:simplemap_dff$9284 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~184 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~633 debug messages>
Removed a total of 211 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 36 unused cells and 6998 unused wires.
<suppressed ~38 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\nerv' to `<abc-temp-dir>/input.blif'..
Extracted 5703 gates and 7152 wires to a netlist network with 1447 inputs and 378 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =    1214.
ABC: Participating nodes from both networks       =    2643.
ABC: Participating nodes from the first network   =    1278. (  39.19 % of nodes)
ABC: Participating nodes from the second network  =    1365. (  41.86 % of nodes)
ABC: Node pairs (any polarity)                    =    1278. (  39.19 % of names can be moved)
ABC: Node pairs (same polarity)                   =     700. (  21.47 % of names can be moved)
ABC: Total runtime =     1.23 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     6520
ABC RESULTS:        internal signals:     5327
ABC RESULTS:           input signals:     1447
ABC RESULTS:          output signals:      378
Removing temp directory.
Removed 0 unused cells and 2326 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000100011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000100000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000100011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110001011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111111001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
No more expansions possible.
<suppressed ~4965 debug messages>
Removed 0 unused cells and 6520 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \nerv

2.43.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.44. Printing statistics.

=== nerv ===

   Number of wires:               3307
   Number of wire bits:           5425
   Number of public wires:          77
   Number of public wire bits:    1761
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4999
     SB_CARRY                      359
     SB_DFF                         43
     SB_DFFE                      1060
     SB_DFFESR                      35
     SB_DFFSR                        1
     SB_LUT4                      3501

2.45. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.46. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 511a3695cf
CPU: user 150.22s system 0.28s, MEM: 205.33 MB total, 84.55 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 30% 27x opt_merge (46 sec), 22% 36x opt_expr (33 sec), ...
